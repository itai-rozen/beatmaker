{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05D0\\u05D9\\u05EA\\u05D9\\\\Downloads\\\\go local\\\\react\\\\beatmaker\\\\client\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Provider } from './components/Context';\nimport useSound from 'use-sound';\nimport notes from './../src/sounds/all-instruments.mp3';\nimport './App.css';\nimport Main from './components/Main/Main.js';\n\nfunction App() {\n  // creating the scale & beat constants\n  const BEATS = 16;\n  const SCALES = ['C2', 'D2', 'E2', 'G2', 'C3', 'D3', 'E3', 'G3', 'C4', 'D4', 'E4']; // creating the BeatBar \n\n  const getBeatCpts = () => {\n    let beatCpts = [];\n\n    for (let i = 0; i < BEATS; i++) {\n      beatCpts.push(i);\n    }\n\n    return beatCpts;\n  };\n\n  const beatCpts = getBeatCpts(); // creating the SoundBoard\n\n  const getSoundPoints = () => {\n    let sounds = [];\n\n    for (let i = 0; i < SCALES.length; i++) {\n      sounds.push([]);\n\n      for (let j = 0; j < BEATS; j++) {\n        sounds[i].push({\n          i: i,\n          j: j,\n          scale: SCALES[i],\n          activeInstruments: {}\n        });\n      }\n    }\n\n    return sounds;\n  }; // assigning names and intervals for the sounds in the mp3 file\n\n\n  const getSprites = () => {\n    let count = -1000;\n    let sprites = {};\n    instruments.forEach(instrument => {\n      SCALES.forEach(scale => {\n        sprites[instrument.name + scale] = [count += 1000, 1000];\n      });\n    });\n    return sprites;\n  }; // initializing some varibales with HOOKS\n\n\n  const [sounds, setSounds] = useState(getSoundPoints());\n  const [activeSounds, setActiveSounds] = useState([]);\n  const [redBeatIndex, setRedBeatIndex] = useState(-1);\n  const [render, setRender] = useState(0);\n  const [initialState, setInitialState] = useState([]);\n  const [instruments, setInstruments] = useState([{\n    name: 'saxophone',\n    checked: true\n  }, {\n    name: 'cello',\n    checked: false\n  }, {\n    name: 'oboe',\n    checked: false\n  }, {\n    name: 'vocal',\n    checked: false\n  }, {\n    name: 'guitar',\n    checked: false\n  }, {\n    name: 'kora',\n    checked: false\n  }, {\n    name: 'vibraphone',\n    checked: false\n  }, {\n    name: 'drums',\n    checked: false\n  }, {\n    name: 'violin',\n    checked: false\n  }]);\n  const [isShowSave, setIsShowSave] = useState(false);\n  const [isShowLoad, setIsShowLoad] = useState(false);\n  const [isPlay, setIsPlay] = useState(false);\n  const [isPause, setIsPause] = useState(false);\n  const [delay, setDelay] = useState(1000);\n  const [tempo, setTempo] = useState(60);\n  const [volume, setVolume] = useState(0.75);\n  const [play] = useSound(notes, {\n    volume: volume,\n    sprite: getSprites(),\n    interrupt: false\n  });\n\n  const assignColor = i => {\n    if (!isPlay && !isPause) return;\n    return i === redBeatIndex ? 'red' : '';\n  };\n\n  const handleClickedSound = (i, j, instrument) => {\n    setSounds(sounds.map(soundRow => soundRow.map(sound => sound.i === i && sound.j === j ? { ...sound,\n      activeInstruments: { ...sound.activeInstruments,\n        [instrument]: !sound.activeInstruments[instrument]\n      }\n    } : sound)));\n  };\n\n  const handleTempo = ev => {\n    let value = ev.target.value;\n    setTempo(value);\n    setDelay(60 / value * 1000);\n  };\n\n  const handleVolume = ev => {\n    if (isPlay) setVolume(ev.target.value);\n  };\n\n  const assignSoundClass = (i, j, instrument) => {\n    let currSoundInstrument = sounds[i][j].activeInstruments[instrument];\n    return currSoundInstrument === true ? 'active' : '';\n  };\n\n  const toggleMute = () => {\n    console.log('let mute!');\n    let volumeSliderValue = document.getElementById('volume-slider').value;\n\n    if (volumeSliderValue !== 0) {\n      volumeSliderValue = 0;\n      document.querySelector('.mute').classList.remove('hidden');\n      setRender(render + 1);\n    } else {\n      volumeSliderValue = 0.75;\n      document.querySelector('.mute').classList.add('hidden');\n      setRender(render + 1);\n    }\n  };\n\n  const playSounds = () => {\n    if (isPlay) {\n      let currentActives = activeSounds.filter(sound => sound.j === redBeatIndex); // console.log('current actives: ',currentActives)\n\n      currentActives.forEach(sound => {\n        for (let instrument in sound.activeInstruments) {\n          // console.log('instrument status: ', sound.activeInstruments[instrument])\n          if (sound.activeInstruments[instrument] === true) play({\n            id: instrument + sound.scale\n          });\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    // console.log('red beat index updated: ', redBeatIndex)\n    // console.log('sounds @ useeffect: ', sounds)\n    let actives = [];\n    sounds.forEach(soundRow => soundRow.forEach(sound => {\n      for (let instrument in sound.activeInstruments) {\n        if (sound.activeInstruments[instrument]) actives.push(sound);\n      }\n    }));\n    setActiveSounds(actives);\n    fetch('/api').then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n    }).then(jsonResponse => {\n      setInitialState(jsonResponse);\n    }).catch(err => console.error(err));\n    console.log('initial state: ', initialState);\n    console.log('active sounds @ useeffect: ', activeSounds);\n    playSounds();\n  }, [redBeatIndex, isPlay, isShowLoad, isShowSave]);\n\n  const clearInstrument = () => {\n    let curreentInsrtumentName = instruments.filter(instrument => instrument.checked)[0].name;\n    setSounds(sounds.map(soundRow => soundRow.map(sound => sound.activeInstruments[curreentInsrtumentName] ? { ...sound,\n      activeInstruments: { ...sound.activeInstruments,\n        [curreentInsrtumentName]: false\n      }\n    } : sound)));\n  }; //////////////\n\n\n  const increment = useRef(null);\n\n  const startPlaying = () => {\n    if (isPlay) return;\n    setIsPlay(true);\n    setIsPause(false);\n    increment.current = setInterval(() => {\n      setRedBeatIndex(redBeatIndex => redBeatIndex === 15 ? 0 : redBeatIndex + 1);\n    }, delay);\n  };\n\n  const pausePlaying = () => {\n    if (!isPlay) return;\n    clearInterval(increment.current);\n    setIsPlay(false);\n    setIsPause(true);\n  };\n\n  const stopPlaying = () => {\n    clearInterval(increment.current);\n    setIsPlay(false);\n    setIsPause(false);\n    setRedBeatIndex(0);\n  };\n\n  const resetPlaying = () => {\n    clearInterval(increment.current);\n    setIsPlay(false);\n    setIsPause(false);\n    setRedBeatIndex(-1);\n    setDelay(1000);\n    setTempo(60);\n    document.getElementById('tempo-slider').value = 60;\n    document.getElementById('volume-slider').value = 0.75;\n    setVolume(0.75);\n    setSounds(getSoundPoints());\n    setActiveSounds([]);\n  }; ///////////////\n\n\n  const playUpdateTempo = () => {\n    if (!isPlay) return;\n    clearInterval(increment.current);\n    increment.current = setInterval(() => {\n      setRedBeatIndex(redBeatIndex => redBeatIndex === 15 ? 0 : redBeatIndex + 1);\n    }, delay);\n  };\n\n  const toggleSaveModal = () => {\n    setIsShowSave(!isShowSave);\n    if (isShowSave) setIsShowLoad(false);\n  };\n\n  const toggleLoadModal = () => {\n    setIsShowLoad(!isShowLoad);\n    if (isShowLoad) setIsShowSave(false);\n  };\n\n  const loadSounds = (snds, tmpo) => {\n    let parsedSounds = JSON.parse(snds);\n    setSounds(parsedSounds);\n    setTempo(tmpo);\n    setDelay(60 / tmpo * 1000);\n    toggleLoadModal();\n  };\n\n  return /*#__PURE__*/React.createElement(Provider, {\n    value: {\n      beatCpts: beatCpts,\n      delay: delay,\n      initialState: initialState,\n      instruments: instruments,\n      isShowLoad: isShowLoad,\n      isShowSave: isShowSave,\n      tempo: tempo,\n      sounds: sounds,\n      redBeatIndex: redBeatIndex,\n      volume: volume,\n      actions: {\n        assignColor: assignColor,\n        checkInstrument: checkInstrument,\n        clearInstrument: clearInstrument,\n        handleClickedSound: handleClickedSound,\n        handleTempo: handleTempo,\n        handleVolume: handleVolume,\n        loadSounds: loadSounds,\n        startPlaying: startPlaying,\n        stopPlaying: stopPlaying,\n        toggleMute: toggleMute,\n        toggleLoadModal: toggleLoadModal,\n        toggleSaveModal: toggleSaveModal,\n        pausePlaying: pausePlaying,\n        playUpdateTempo: playUpdateTempo,\n        resetPlaying: resetPlaying,\n        assignSoundClass: assignSoundClass\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/איתי/Downloads/go local/react/beatmaker/client/src/App.js"],"names":["React","useState","useEffect","useRef","Provider","useSound","notes","Main","App","BEATS","SCALES","getBeatCpts","beatCpts","i","push","getSoundPoints","sounds","length","j","scale","activeInstruments","getSprites","count","sprites","instruments","forEach","instrument","name","setSounds","activeSounds","setActiveSounds","redBeatIndex","setRedBeatIndex","render","setRender","initialState","setInitialState","setInstruments","checked","isShowSave","setIsShowSave","isShowLoad","setIsShowLoad","isPlay","setIsPlay","isPause","setIsPause","delay","setDelay","tempo","setTempo","volume","setVolume","play","sprite","interrupt","assignColor","handleClickedSound","map","soundRow","sound","handleTempo","ev","value","target","handleVolume","assignSoundClass","currSoundInstrument","toggleMute","console","log","volumeSliderValue","document","getElementById","querySelector","classList","remove","add","playSounds","currentActives","filter","id","actives","fetch","then","res","ok","json","jsonResponse","catch","err","error","clearInstrument","curreentInsrtumentName","increment","startPlaying","current","setInterval","pausePlaying","clearInterval","stopPlaying","resetPlaying","playUpdateTempo","toggleSaveModal","toggleLoadModal","loadSounds","snds","tmpo","parsedSounds","JSON","parse","actions","checkInstrument"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Provider } from './components/Context'\nimport useSound from 'use-sound'\nimport notes from './../src/sounds/all-instruments.mp3'\nimport './App.css';\nimport Main from './components/Main/Main.js'\n\n\nfunction App() {\n\n  // creating the scale & beat constants\n  const BEATS = 16\n  const SCALES = ['C2', 'D2', 'E2', 'G2', 'C3', 'D3', 'E3', 'G3', 'C4', 'D4', 'E4']\n\n  // creating the BeatBar \n  const getBeatCpts = () => {\n    let beatCpts = []\n    for (let i = 0; i < BEATS; i++) {\n      beatCpts.push(i)\n    }\n    return beatCpts\n  }\n\n  const beatCpts = getBeatCpts()\n\n   // creating the SoundBoard\n\n  const getSoundPoints = () => {\n    let sounds = []\n    for (let i = 0; i < SCALES.length; i++) {\n      sounds.push([])\n      for (let j = 0; j < BEATS; j++) {\n        sounds[i].push({\n          i: i, j: j, scale: SCALES[i],\n          activeInstruments:  {}\n        })\n      }\n    }\n    return sounds\n  }\n\n\n  // assigning names and intervals for the sounds in the mp3 file\n\n  const  getSprites = () => {\n    let count = -1000\n    let sprites = {}\n    instruments.forEach( instrument => {\n      ( SCALES.forEach(scale => {\n        sprites[instrument.name + scale] =  [count += 1000, 1000]  \n      }))\n    })\n    return sprites\n  }\n\n  // initializing some varibales with HOOKS\n\n  const [sounds, setSounds] = useState(getSoundPoints())\n  const [activeSounds, setActiveSounds] = useState([])\n  const [redBeatIndex, setRedBeatIndex] = useState(-1)\n  const [render, setRender] = useState(0)\n  const [initialState,setInitialState] = useState([])\n  const [instruments, setInstruments] = useState([\n    { name: 'saxophone', checked: true },\n    { name: 'cello', checked: false },\n    { name: 'oboe', checked: false },\n    { name: 'vocal', checked: false },\n    { name: 'guitar', checked: false },\n    { name: 'kora', checked: false },\n    { name: 'vibraphone', checked: false },\n    { name: 'drums', checked: false },\n    { name: 'violin', checked: false}\n  ])\n  const [isShowSave, setIsShowSave] = useState(false)\n  const [isShowLoad, setIsShowLoad] = useState(false)\n  const [isPlay, setIsPlay] = useState(false)\n  const [isPause, setIsPause] = useState(false)\n  const [delay, setDelay] = useState(1000)\n  const [tempo, setTempo] = useState(60)\n  const [volume, setVolume] = useState(0.75)\n  const [play] = useSound(notes, {\n    volume: volume,\n    sprite: getSprites(),\n    interrupt: false\n  })\n\n\n\n\n\n  const assignColor = i => {\n    if (!isPlay && !isPause) return\n    return i === redBeatIndex ? 'red' : ''\n  }\n\n\n\n  const handleClickedSound = (i, j, instrument) => {\n    setSounds(\n      sounds.map(soundRow =>\n        soundRow.map(sound => (sound.i === i && sound.j === j) ? { ...sound, activeInstruments: { ...sound.activeInstruments, [instrument]: !sound.activeInstruments[instrument] } } : sound\n        ))\n    )\n  }\n\n\n\n  const handleTempo = ev => {\n    let value = ev.target.value\n    setTempo(value)\n    setDelay(60 / value * 1000)\n  }\n\n\n  const handleVolume = ev =>  {if (isPlay) setVolume(ev.target.value)}\n\n  const assignSoundClass = (i, j, instrument) => {\n    let currSoundInstrument = sounds[i][j].activeInstruments[instrument]\n    return (currSoundInstrument === true) ? 'active' : ''\n  }\n\n  const toggleMute = () => {\n    console.log('let mute!')\n    let volumeSliderValue = document.getElementById('volume-slider').value\n    if (volumeSliderValue !== 0) {\n      volumeSliderValue = 0\n      document.querySelector('.mute').classList.remove('hidden')\n      setRender(render+1)\n    } else {\n      volumeSliderValue = 0.75\n      document.querySelector('.mute').classList.add('hidden')\n      setRender(render+1)\n    }\n  }\n\n  const playSounds = () => {\n\n    if (isPlay) {\n\n      let currentActives = activeSounds.filter(sound => sound.j === redBeatIndex)\n      // console.log('current actives: ',currentActives)\n      currentActives.forEach(sound => {\n        for (let instrument in sound.activeInstruments) {\n          // console.log('instrument status: ', sound.activeInstruments[instrument])\n          if (sound.activeInstruments[instrument] === true) play({id: instrument + sound.scale})\n        }\n      })\n    }\n  }\n\n  useEffect(() => {\n    // console.log('red beat index updated: ', redBeatIndex)\n    // console.log('sounds @ useeffect: ', sounds)\n    let actives = []\n    sounds.forEach(soundRow => soundRow.forEach(sound => {\n      for (let instrument in (sound.activeInstruments)){\n        if (sound.activeInstruments[instrument]) actives.push(sound)\n      }\n    }))\n    setActiveSounds(actives) \n    fetch('/api')\n    .then(res=> {\n      if(res.ok){\n        return res.json()\n      }\n    }).then(jsonResponse => {\n      setInitialState(jsonResponse)\n    })\n    .catch(err => console.error(err))\n    console.log('initial state: ',initialState)\n    console.log('active sounds @ useeffect: ', activeSounds)\n    playSounds()\n  }, [redBeatIndex, isPlay,isShowLoad,isShowSave])\n\n\n  const clearInstrument = () => {\n    let curreentInsrtumentName = instruments.filter(instrument => instrument.checked)[0].name\n    setSounds(sounds.map(soundRow => soundRow.map(\n      (sound => (sound.activeInstruments[curreentInsrtumentName]) ? { ...sound, activeInstruments: { ...sound.activeInstruments, [curreentInsrtumentName]: false } } : sound\n      )\n    )))\n  }\n\n  //////////////\n  const increment = useRef(null)\n  const startPlaying = () => {\n    if (isPlay) return\n\n    setIsPlay(true)\n    setIsPause(false)\n    increment.current = setInterval(() => {\n      setRedBeatIndex((redBeatIndex) => redBeatIndex === 15 ? 0 : redBeatIndex + 1)\n    }, delay)\n  }\n\n  const pausePlaying = () => {\n    if (!isPlay) return\n    clearInterval(increment.current);\n    setIsPlay(false)\n    setIsPause(true)\n  }\n\n  const stopPlaying = () => {\n    clearInterval(increment.current)\n    setIsPlay(false)\n    setIsPause(false)\n    setRedBeatIndex(0)\n  }\n\n  const resetPlaying = () => {\n    clearInterval(increment.current)\n    setIsPlay(false)\n    setIsPause(false)\n    setRedBeatIndex(-1)\n    setDelay(1000)\n    setTempo(60)\n    document.getElementById('tempo-slider').value = 60\n    document.getElementById('volume-slider').value = 0.75\n    setVolume(0.75)\n    setSounds(getSoundPoints())\n    setActiveSounds([])\n  }\n\n  ///////////////\n\n  const playUpdateTempo = () => {\n    if (!isPlay) return\n    clearInterval(increment.current);\n    increment.current = setInterval(() => {\n      setRedBeatIndex((redBeatIndex) => redBeatIndex === 15 ? 0 : redBeatIndex + 1)\n    }, delay)\n  }\n\n \n\n  const toggleSaveModal = () => {\n    setIsShowSave(!isShowSave)\n    if (isShowSave) setIsShowLoad(false)\n  }\n\n\n\n  const toggleLoadModal = () => {\n    setIsShowLoad(!isShowLoad)\n    if (isShowLoad) setIsShowSave(false)\n  }\n\n  const loadSounds = (snds,tmpo) => {\n    let parsedSounds = JSON.parse(snds)\n    setSounds(parsedSounds)\n    setTempo(tmpo)\n    setDelay(60 / tmpo * 1000)\n    toggleLoadModal()\n  }\n\n  return (\n    <Provider value={\n      {\n        beatCpts: beatCpts,\n        delay: delay,\n        initialState: initialState,\n        instruments: instruments,\n        isShowLoad: isShowLoad,\n        isShowSave: isShowSave,\n        tempo: tempo,\n        sounds: sounds,\n        redBeatIndex: redBeatIndex,\n        volume: volume,\n        actions: {\n          assignColor: assignColor,\n          checkInstrument: checkInstrument,\n          clearInstrument : clearInstrument,\n          handleClickedSound: handleClickedSound,\n          handleTempo: handleTempo,\n          handleVolume: handleVolume,\n          loadSounds : loadSounds,\n          startPlaying: startPlaying,\n          stopPlaying: stopPlaying,\n          toggleMute: toggleMute,\n          toggleLoadModal: toggleLoadModal,\n          toggleSaveModal: toggleSaveModal,\n          pausePlaying: pausePlaying,\n          playUpdateTempo: playUpdateTempo,\n          resetPlaying: resetPlaying,\n          assignSoundClass: assignSoundClass\n        }\n      }\n    }>\n\n      <div className=\"App\">\n          <Main />\n      </div>\n    </Provider>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}