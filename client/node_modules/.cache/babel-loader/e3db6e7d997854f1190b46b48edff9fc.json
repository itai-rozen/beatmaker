{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05D0\\u05D9\\u05EA\\u05D9\\\\Downloads\\\\go local\\\\react\\\\beatmaker\\\\client\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Provider } from './components/Context';\nimport useSound from 'use-sound';\nimport notes from './../src/sounds/all-instruments.mp3';\nimport './App.css';\nimport Main from './components/Main/Main.js';\n\nfunction App() {\n  // creating the scale & beat constants\n  const BEATS = 16;\n  const SCALES = ['C2', 'D2', 'E2', 'G2', 'C3', 'D3', 'E3', 'G3', 'C4', 'D4', 'E4']; // creating the BeatBar \n\n  const getBeatCpts = () => {\n    let beatCpts = [];\n\n    for (let i = 0; i < BEATS; i++) {\n      beatCpts.push(i);\n    }\n\n    return beatCpts;\n  };\n\n  const beatCpts = getBeatCpts(); // creating the SoundBoard\n\n  const getSoundPoints = () => {\n    let sounds = [];\n\n    for (let i = 0; i < SCALES.length; i++) {\n      sounds.push([]);\n\n      for (let j = 0; j < BEATS; j++) {\n        sounds[i].push({\n          i: i,\n          j: j,\n          scale: SCALES[i],\n          activeInstruments: {}\n        });\n      }\n    }\n\n    return sounds;\n  }; // assigning names and intervals for the sounds in the mp3 file\n\n\n  const getSprites = () => {\n    let count = -1000;\n    let sprites = {};\n    instruments.forEach(instrument => {\n      SCALES.forEach(scale => {\n        sprites[instrument.name + scale] = [count += 1000, 1000];\n      });\n    });\n    return sprites;\n  }; // initializing some varibales with HOOKS\n\n\n  const [sounds, setSounds] = useState(getSoundPoints());\n  const [activeSounds, setActiveSounds] = useState([]);\n  const [redBeatIndex, setRedBeatIndex] = useState(-1); // const [render, setRender] = useState(0)\n\n  const [initialState, setInitialState] = useState([]);\n  const [instruments, setInstruments] = useState([{\n    name: 'saxophone',\n    checked: true\n  }, {\n    name: 'cello',\n    checked: false\n  }, {\n    name: 'oboe',\n    checked: false\n  }, {\n    name: 'vocal',\n    checked: false\n  }, {\n    name: 'guitar',\n    checked: false\n  }, {\n    name: 'kora',\n    checked: false\n  }, {\n    name: 'vibraphone',\n    checked: false\n  }, {\n    name: 'drums',\n    checked: false\n  }, {\n    name: 'violin',\n    checked: false\n  }]);\n  const [isShowSave, setIsShowSave] = useState(false);\n  const [isShowLoad, setIsShowLoad] = useState(false);\n  const [isPlay, setIsPlay] = useState(false);\n  const [isPause, setIsPause] = useState(false);\n  const [delay, setDelay] = useState(1000);\n  const [tempo, setTempo] = useState(60);\n  const [volume, setVolume] = useState(0.75); // the useSound HOOK !!\n\n  const [play] = useSound(notes, {\n    volume: volume,\n    sprite: getSprites(),\n    interrupt: false\n  }); // functions for the Instrument Bar\n\n  const checkInstrument = name => {\n    setInstruments(instruments.map(instrument => instrument.name === name ? { ...instrument,\n      checked: true\n    } : { ...instrument,\n      checked: false\n    }));\n  }; // functions for the Beat Bar\n\n\n  const assignColor = i => {\n    if (!isPlay && !isPause) return;\n    return i === redBeatIndex ? 'red' : '';\n  }; // functions for the Sound Board\n\n\n  const handleClickedSound = (i, j, instrument) => {\n    setSounds(sounds.map(soundRow => soundRow.map(sound => sound.i === i && sound.j === j ? { ...sound,\n      activeInstruments: { ...sound.activeInstruments,\n        [instrument]: !sound.activeInstruments[instrument]\n      }\n    } : sound)));\n  };\n\n  const assignSoundClass = (i, j, instrument) => {\n    let currSoundInstrument = sounds[i][j].activeInstruments[instrument];\n    return currSoundInstrument === true ? 'active' : '';\n  }; // const toggleMute = () => {\n  //   console.log('let mute!')\n  //   let volumeSliderValue = document.getElementById('volume-slider').value\n  //   if (volumeSliderValue !== 0) {\n  //     volumeSliderValue = 0\n  //     document.querySelector('.mute').classList.remove('hidden')\n  //     setRender(render+1)\n  //   } else {\n  //     volumeSliderValue = 0.75\n  //     document.querySelector('.mute').classList.add('hidden')\n  //     setRender(render+1)\n  //   }\n  // }\n\n\n  const playSounds = () => {\n    if (isPlay) {\n      let currentActives = activeSounds.filter(sound => sound.j === redBeatIndex); // console.log('current actives: ',currentActives)\n\n      currentActives.forEach(sound => {\n        for (let instrument in sound.activeInstruments) {\n          // console.log('instrument status: ', sound.activeInstruments[instrument])\n          if (sound.activeInstruments[instrument] === true) play({\n            id: instrument + sound.scale\n          });\n        }\n      });\n    }\n  }; // USE EFFECT! all the stuff that renders on each change of the usestates in the brackets below\n\n\n  useEffect(() => {\n    let actives = [];\n    sounds.forEach(soundRow => soundRow.forEach(sound => {\n      for (let instrument in sound.activeInstruments) {\n        if (sound.activeInstruments[instrument]) actives.push(sound);\n      }\n    }));\n    setActiveSounds(actives);\n    fetch('/api').then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n    }).then(jsonResponse => {\n      setInitialState(jsonResponse);\n    }).catch(err => console.error(err));\n    console.log('initial state: ', initialState);\n    console.log('active sounds @ useeffect: ', activeSounds);\n    playSounds();\n  }, [redBeatIndex, isPlay, isShowLoad, isShowSave]); // initializing the increment  with useRef (otherwise setInterval wont work properly)\n\n  const increment = useRef(null); // functions for the Control Buttons Bar\n\n  const startPlaying = () => {\n    if (isPlay) return;\n    setIsPlay(true);\n    setIsPause(false);\n    increment.current = setInterval(() => {\n      setRedBeatIndex(redBeatIndex => redBeatIndex === 15 ? 0 : redBeatIndex + 1);\n    }, delay);\n  };\n\n  const pausePlaying = () => {\n    if (!isPlay) return;\n    clearInterval(increment.current);\n    setIsPlay(false);\n    setIsPause(true);\n  };\n\n  const stopPlaying = () => {\n    clearInterval(increment.current);\n    setIsPlay(false);\n    setIsPause(false);\n    setRedBeatIndex();\n  };\n\n  const resetPlaying = () => {\n    clearInterval(increment.current);\n    setIsPlay(false);\n    setIsPause(false);\n    setRedBeatIndex(-1);\n    setDelay(1000);\n    setTempo(60);\n    document.getElementById('tempo-slider').value = 60;\n    document.getElementById('volume-slider').value = 0.75;\n    setVolume(0.75);\n    setSounds(getSoundPoints());\n    setActiveSounds([]);\n  };\n\n  const clearInstrument = () => {\n    let currentInsrtumentName = instruments.filter(instrument => instrument.checked)[0].name;\n    setSounds(sounds.map(soundRow => soundRow.map(sound => sound.activeInstruments[currentInsrtumentName] ? { ...sound,\n      activeInstruments: { ...sound.activeInstruments,\n        [currentInsrtumentName]: false\n      }\n    } : sound)));\n  };\n\n  const handleTempo = ev => {\n    let value = ev.target.value;\n    setTempo(value);\n    setDelay(60 / value * 1000);\n  };\n\n  const handleVolume = ev => {\n    if (isPlay) setVolume(ev.target.value);\n  };\n\n  const playUpdateTempo = () => {\n    if (!isPlay) return;\n    clearInterval(increment.current);\n    increment.current = setInterval(() => {\n      setRedBeatIndex(redBeatIndex => redBeatIndex === 15 ? 0 : redBeatIndex + 1);\n    }, delay);\n  }; // functions for saving & loading modals in the Control Buttons Bar\n\n\n  const toggleSaveModal = () => {\n    setIsShowSave(!isShowSave);\n    if (isShowSave) setIsShowLoad(false);\n  };\n\n  const toggleLoadModal = () => {\n    setIsShowLoad(!isShowLoad);\n    if (isShowLoad) setIsShowSave(false);\n  };\n\n  const loadSounds = (snds, tmpo) => {\n    let parsedSounds = JSON.parse(snds);\n    setSounds(parsedSounds);\n    setTempo(tmpo);\n    setDelay(60 / tmpo * 1000);\n    toggleLoadModal();\n  };\n\n  return /*#__PURE__*/React.createElement(Provider, {\n    value: {\n      beatCpts: beatCpts,\n      delay: delay,\n      initialState: initialState,\n      instruments: instruments,\n      isShowLoad: isShowLoad,\n      isShowSave: isShowSave,\n      tempo: tempo,\n      sounds: sounds,\n      redBeatIndex: redBeatIndex,\n      volume: volume,\n      actions: {\n        assignColor: assignColor,\n        checkInstrument: checkInstrument,\n        clearInstrument: clearInstrument,\n        handleClickedSound: handleClickedSound,\n        handleTempo: handleTempo,\n        handleVolume: handleVolume,\n        loadSounds: loadSounds,\n        startPlaying: startPlaying,\n        stopPlaying: stopPlaying,\n        toggleLoadModal: toggleLoadModal,\n        toggleSaveModal: toggleSaveModal,\n        pausePlaying: pausePlaying,\n        playUpdateTempo: playUpdateTempo,\n        resetPlaying: resetPlaying,\n        assignSoundClass: assignSoundClass\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/איתי/Downloads/go local/react/beatmaker/client/src/App.js"],"names":["React","useState","useEffect","useRef","Provider","useSound","notes","Main","App","BEATS","SCALES","getBeatCpts","beatCpts","i","push","getSoundPoints","sounds","length","j","scale","activeInstruments","getSprites","count","sprites","instruments","forEach","instrument","name","setSounds","activeSounds","setActiveSounds","redBeatIndex","setRedBeatIndex","initialState","setInitialState","setInstruments","checked","isShowSave","setIsShowSave","isShowLoad","setIsShowLoad","isPlay","setIsPlay","isPause","setIsPause","delay","setDelay","tempo","setTempo","volume","setVolume","play","sprite","interrupt","checkInstrument","map","assignColor","handleClickedSound","soundRow","sound","assignSoundClass","currSoundInstrument","playSounds","currentActives","filter","id","actives","fetch","then","res","ok","json","jsonResponse","catch","err","console","error","log","increment","startPlaying","current","setInterval","pausePlaying","clearInterval","stopPlaying","resetPlaying","document","getElementById","value","clearInstrument","currentInsrtumentName","handleTempo","ev","target","handleVolume","playUpdateTempo","toggleSaveModal","toggleLoadModal","loadSounds","snds","tmpo","parsedSounds","JSON","parse","actions"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Provider } from './components/Context'\nimport useSound from 'use-sound'\nimport notes from './../src/sounds/all-instruments.mp3'\nimport './App.css';\nimport Main from './components/Main/Main.js'\n\n\nfunction App() {\n\n  // creating the scale & beat constants\n  const BEATS = 16\n  const SCALES = ['C2', 'D2', 'E2', 'G2', 'C3', 'D3', 'E3', 'G3', 'C4', 'D4', 'E4']\n\n  // creating the BeatBar \n  const getBeatCpts = () => {\n    let beatCpts = []\n    for (let i = 0; i < BEATS; i++) {\n      beatCpts.push(i)\n    }\n    return beatCpts\n  }\n\n  const beatCpts = getBeatCpts()\n\n   // creating the SoundBoard\n\n  const getSoundPoints = () => {\n    let sounds = []\n    for (let i = 0; i < SCALES.length; i++) {\n      sounds.push([])\n      for (let j = 0; j < BEATS; j++) {\n        sounds[i].push({\n          i: i, j: j, scale: SCALES[i],\n          activeInstruments:  {}\n        })\n      }\n    }\n    return sounds\n  }\n\n\n  // assigning names and intervals for the sounds in the mp3 file\n\n  const  getSprites = () => {\n    let count = -1000\n    let sprites = {}\n    instruments.forEach( instrument => {\n      ( SCALES.forEach(scale => {\n        sprites[instrument.name + scale] =  [count += 1000, 1000]  \n      }))\n    })\n    return sprites\n  }\n\n  // initializing some varibales with HOOKS\n\n  const [sounds, setSounds] = useState(getSoundPoints())\n  const [activeSounds, setActiveSounds] = useState([])\n  const [redBeatIndex, setRedBeatIndex] = useState(-1)\n  // const [render, setRender] = useState(0)\n  const [initialState,setInitialState] = useState([])\n  const [instruments, setInstruments] = useState([\n    { name: 'saxophone', checked: true },\n    { name: 'cello', checked: false },\n    { name: 'oboe', checked: false },\n    { name: 'vocal', checked: false },\n    { name: 'guitar', checked: false },\n    { name: 'kora', checked: false },\n    { name: 'vibraphone', checked: false },\n    { name: 'drums', checked: false },\n    { name: 'violin', checked: false}\n  ])\n  const [isShowSave, setIsShowSave] = useState(false)\n  const [isShowLoad, setIsShowLoad] = useState(false)\n  const [isPlay, setIsPlay] = useState(false)\n  const [isPause, setIsPause] = useState(false)\n  const [delay, setDelay] = useState(1000)\n  const [tempo, setTempo] = useState(60)\n  const [volume, setVolume] = useState(0.75)\n\n    // the useSound HOOK !!\n  const [play] = useSound(notes, {\n    volume: volume,\n    sprite: getSprites(),\n    interrupt: false\n  })\n\n  // functions for the Instrument Bar\n\n  const checkInstrument = name => {\n    setInstruments(instruments.map(instrument => (instrument.name === name) ? { ...instrument, checked: true } : { ...instrument, checked: false }))\n  }\n\n\n  // functions for the Beat Bar\n  const assignColor = i => {\n    if (!isPlay && !isPause) return\n    return i === redBeatIndex ? 'red' : ''\n  }\n\n  // functions for the Sound Board\n\n  const handleClickedSound = (i, j, instrument) => {\n    setSounds(\n      sounds.map(soundRow =>\n        soundRow.map(sound => (sound.i === i && sound.j === j) ? { ...sound, activeInstruments: { ...sound.activeInstruments, [instrument]: !sound.activeInstruments[instrument] } } : sound\n        ))\n    )\n  }\n\n  const assignSoundClass = (i, j, instrument) => {\n    let currSoundInstrument = sounds[i][j].activeInstruments[instrument]\n    return (currSoundInstrument === true) ? 'active' : ''\n  }\n\n\n  \n\n\n\n\n  // const toggleMute = () => {\n  //   console.log('let mute!')\n  //   let volumeSliderValue = document.getElementById('volume-slider').value\n  //   if (volumeSliderValue !== 0) {\n  //     volumeSliderValue = 0\n  //     document.querySelector('.mute').classList.remove('hidden')\n  //     setRender(render+1)\n  //   } else {\n  //     volumeSliderValue = 0.75\n  //     document.querySelector('.mute').classList.add('hidden')\n  //     setRender(render+1)\n  //   }\n  // }\n\n\n\n  const playSounds = () => {\n\n    if (isPlay) {\n\n      let currentActives = activeSounds.filter(sound => sound.j === redBeatIndex)\n      // console.log('current actives: ',currentActives)\n      currentActives.forEach(sound => {\n        for (let instrument in sound.activeInstruments) {\n          // console.log('instrument status: ', sound.activeInstruments[instrument])\n          if (sound.activeInstruments[instrument] === true) play({id: instrument + sound.scale})\n        }\n      })\n    }\n  }\n\n  // USE EFFECT! all the stuff that renders on each change of the usestates in the brackets below\n  useEffect(() => {\n    let actives = []\n    sounds.forEach(soundRow => soundRow.forEach(sound => {\n      for (let instrument in (sound.activeInstruments)){\n        if (sound.activeInstruments[instrument]) actives.push(sound)\n      }\n    }))\n    setActiveSounds(actives) \n    fetch('/api')\n    .then(res=> {\n      if(res.ok){\n        return res.json()\n      }\n    }).then(jsonResponse => {\n      setInitialState(jsonResponse)\n    })\n    .catch(err => console.error(err))\n    console.log('initial state: ',initialState)\n    console.log('active sounds @ useeffect: ', activeSounds)\n    playSounds()\n  }, [redBeatIndex, isPlay,isShowLoad,isShowSave])\n\n\n\n\n  // initializing the increment  with useRef (otherwise setInterval wont work properly)\n  const increment = useRef(null)\n  \n  // functions for the Control Buttons Bar\n  const startPlaying = () => {\n    if (isPlay) return\n    setIsPlay(true)\n    setIsPause(false)\n    increment.current = setInterval(() => {\n      setRedBeatIndex((redBeatIndex) => redBeatIndex === 15 ? 0 : redBeatIndex + 1)\n    }, delay)\n  }\n\n  const pausePlaying = () => {\n    if (!isPlay) return\n    clearInterval(increment.current);\n    setIsPlay(false)\n    setIsPause(true)\n  }\n\n  const stopPlaying = () => {\n    clearInterval(increment.current)\n    setIsPlay(false)\n    setIsPause(false)\n    setRedBeatIndex()\n  }\n\n  const resetPlaying = () => {\n    clearInterval(increment.current)\n    setIsPlay(false)\n    setIsPause(false)\n    setRedBeatIndex(-1)\n    setDelay(1000)\n    setTempo(60)\n    document.getElementById('tempo-slider').value = 60\n    document.getElementById('volume-slider').value = 0.75\n    setVolume(0.75)\n    setSounds(getSoundPoints())\n    setActiveSounds([])\n  }\n\n  const clearInstrument = () => {\n    let currentInsrtumentName = instruments.filter(instrument => instrument.checked)[0].name\n    setSounds(sounds.map(soundRow => soundRow.map(\n      (sound => (sound.activeInstruments[currentInsrtumentName]) ? { ...sound, activeInstruments: { ...sound.activeInstruments, [currentInsrtumentName]: false } } : sound\n      )\n    )))\n  }\n\n\n  const handleTempo = ev => {\n    let value = ev.target.value\n    setTempo(value)\n    setDelay(60 / value * 1000)\n  }\n\n\n  const handleVolume = ev =>  {if (isPlay) setVolume(ev.target.value)}\n\n  const playUpdateTempo = () => {\n    if (!isPlay) return\n    clearInterval(increment.current);\n    increment.current = setInterval(() => {\n      setRedBeatIndex((redBeatIndex) => redBeatIndex === 15 ? 0 : redBeatIndex + 1)\n    }, delay)\n  }\n\n   // functions for saving & loading modals in the Control Buttons Bar\n\n  const toggleSaveModal = () => {\n    setIsShowSave(!isShowSave)\n    if (isShowSave) setIsShowLoad(false)\n  }\n\n  const toggleLoadModal = () => {\n    setIsShowLoad(!isShowLoad)\n    if (isShowLoad) setIsShowSave(false)\n  }\n\n  const loadSounds = (snds,tmpo) => {\n    let parsedSounds = JSON.parse(snds)\n    setSounds(parsedSounds)\n    setTempo(tmpo)\n    setDelay(60 / tmpo * 1000)\n    toggleLoadModal()\n  }\n\n  return (\n    <Provider value={\n      {\n        beatCpts: beatCpts,\n        delay: delay,\n        initialState: initialState,\n        instruments: instruments,\n        isShowLoad: isShowLoad,\n        isShowSave: isShowSave,\n        tempo: tempo,\n        sounds: sounds,\n        redBeatIndex: redBeatIndex,\n        volume: volume,\n        actions: {\n          assignColor: assignColor,\n          checkInstrument: checkInstrument,\n          clearInstrument : clearInstrument,\n          handleClickedSound: handleClickedSound,\n          handleTempo: handleTempo,\n          handleVolume: handleVolume,\n          loadSounds : loadSounds,\n          startPlaying: startPlaying,\n          stopPlaying: stopPlaying,\n          toggleLoadModal: toggleLoadModal,\n          toggleSaveModal: toggleSaveModal,\n          pausePlaying: pausePlaying,\n          playUpdateTempo: playUpdateTempo,\n          resetPlaying: resetPlaying,\n          assignSoundClass: assignSoundClass\n        }\n      }\n    }>\n\n      <div className=\"App\">\n          <Main />\n      </div>\n    </Provider>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}