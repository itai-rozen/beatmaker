[{"C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\index.js":"1","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\App.js":"2","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\serviceWorker.js":"3","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\Main\\Main.js":"4","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\ControlButtons\\ControlButtons.js":"5","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\Header\\Header.js":"6","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\InstrumentsBar\\InstrumentsBar.js":"7","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\BeatBar\\BeatBar.js":"8","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\Load\\Load.js":"9","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\Save\\Save.js":"10","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\SoundBoard\\SoundBoard.js":"11","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\Context\\index.js":"12","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\Beat\\Beat.js":"13","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\Sound\\Sound.js":"14"},{"size":503,"mtime":1605473575124,"results":"15","hashOfConfig":"16"},{"size":8472,"mtime":1619439641994,"results":"17","hashOfConfig":"16"},{"size":5086,"mtime":1605473575171,"results":"18","hashOfConfig":"16"},{"size":1215,"mtime":1619455772376,"results":"19","hashOfConfig":"16"},{"size":1854,"mtime":1619455656408,"results":"20","hashOfConfig":"16"},{"size":159,"mtime":1605473575592,"results":"21","hashOfConfig":"16"},{"size":948,"mtime":1605473575655,"results":"22","hashOfConfig":"16"},{"size":497,"mtime":1605473575451,"results":"23","hashOfConfig":"16"},{"size":1569,"mtime":1619455926969,"results":"24","hashOfConfig":"16"},{"size":1460,"mtime":1619455898234,"results":"25","hashOfConfig":"16"},{"size":600,"mtime":1605473575983,"results":"26","hashOfConfig":"16"},{"size":146,"mtime":1605473575514,"results":"27","hashOfConfig":"16"},{"size":260,"mtime":1605473575405,"results":"28","hashOfConfig":"16"},{"size":432,"mtime":1605473575920,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1vs8p0j",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\index.js",[],["61","62"],"C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\App.js",["63"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Provider } from './components/Context'\nimport useSound from 'use-sound'\nimport notes from './../src/sounds/all-instruments.mp3'\nimport './App.css';\nimport Main from './components/Main/Main.js'\n\n\nfunction App() {\n\n  // creating the scale & beat constants\n  const BEATS = 16\n  const SCALES = ['C2', 'D2', 'E2', 'G2', 'C3', 'D3', 'E3', 'G3', 'C4', 'D4', 'E4']\n\n  // creating the BeatBar \n  const getBeatCpts = () => {\n    let beatCpts = []\n    for (let i = 0; i < BEATS; i++) {\n      beatCpts.push(i)\n    }\n    return beatCpts\n  }\n\n  const beatCpts = getBeatCpts()\n\n   // creating the SoundBoard\n\n  const getSoundPoints = () => {\n    let sounds = []\n    for (let i = 0; i < SCALES.length; i++) {\n      sounds.push([])\n      for (let j = 0; j < BEATS; j++) {\n        sounds[i].push({\n          i: i, j: j, scale: SCALES[i],\n          activeInstruments:  {}\n        })\n      }\n    }\n    return sounds\n  }\n\n\n  // assigning names and intervals for the sounds in the mp3 file\n\n  const  getSprites = () => {\n    let count = -1000\n    let sprites = {}\n    instruments.forEach( instrument => {\n      ( SCALES.forEach(scale => {\n        sprites[instrument.name + scale] =  [count += 1000, 1000]  \n      }))\n    })\n    return sprites\n  }\n\n  // initializing some varibales with HOOKS\n\n  const [sounds, setSounds] = useState(getSoundPoints())\n  const [activeSounds, setActiveSounds] = useState([])\n  const [redBeatIndex, setRedBeatIndex] = useState(-1)\n  // const [render, setRender] = useState(0)\n  const [initialState,setInitialState] = useState([])\n  const [instruments, setInstruments] = useState([\n    { name: 'saxophone', checked: true },\n    { name: 'cello', checked: false },\n    { name: 'oboe', checked: false },\n    { name: 'vocal', checked: false },\n    { name: 'guitar', checked: false },\n    { name: 'kora', checked: false },\n    { name: 'vibraphone', checked: false },\n    { name: 'drums', checked: false },\n    { name: 'violin', checked: false}\n  ])\n  const [isShowSave, setIsShowSave] = useState(false)\n  const [isShowLoad, setIsShowLoad] = useState(false)\n  const [isPlay, setIsPlay] = useState(false)\n  const [isPause, setIsPause] = useState(false)\n  const [delay, setDelay] = useState(1000)\n  const [tempo, setTempo] = useState(60)\n  const [volume, setVolume] = useState(0.75)\n\n    // the useSound HOOK !!\n  const [play] = useSound(notes, {\n    volume: volume,\n    sprite: getSprites(),\n    interrupt: false\n  })\n\n  // functions for the Instrument Bar\n\n  const checkInstrument = name => {\n    setInstruments(instruments.map(instrument => (instrument.name === name) ? { ...instrument, checked: true } : { ...instrument, checked: false }))\n  }\n\n\n  // functions for the Beat Bar\n  const assignColor = i => {\n    if (!isPlay && !isPause) return\n    return i === redBeatIndex ? 'red' : ''\n  }\n\n  // functions for the Sound Board\n\n  const handleClickedSound = (i, j, instrument) => {\n    setSounds(\n      sounds.map(soundRow =>\n        soundRow.map(sound => (sound.i === i && sound.j === j) ? { ...sound, activeInstruments: { ...sound.activeInstruments, [instrument]: !sound.activeInstruments[instrument] } } : sound\n        ))\n    )\n  }\n\n  const assignSoundClass = (i, j, instrument) => {\n    let currSoundInstrument = sounds[i][j].activeInstruments[instrument]\n    return (currSoundInstrument === true) ? 'active' : ''\n  }\n\n\n  \n\n\n\n\n\n\n\n  const playSounds = () => {\n\n    if (isPlay) {\n\n      let currentActives = activeSounds.filter(sound => sound.j === redBeatIndex)\n      // console.log('current actives: ',currentActives)\n      currentActives.forEach(sound => {\n        for (let instrument in sound.activeInstruments) {\n          // console.log('instrument status: ', sound.activeInstruments[instrument])\n          if (sound.activeInstruments[instrument] === true) play({id: instrument + sound.scale})\n        }\n      })\n    }\n  }\n\n  // USE EFFECT! all the stuff that renders on each change of the usestates in the brackets below\n  useEffect(() => {\n    let actives = []\n    sounds.forEach(soundRow => soundRow.forEach(sound => {\n      for (let instrument in (sound.activeInstruments)){\n        if (sound.activeInstruments[instrument]) actives.push(sound)\n      }\n    }))\n    setActiveSounds(actives) \n    console.log('initial state: ',initialState)\n    console.log('active sounds @ useeffect: ', activeSounds)\n    playSounds()\n  }, [redBeatIndex, isPlay,isShowLoad,isShowSave,initialState])\n\n\n\n\n  // initializing the increment  with useRef (otherwise setInterval wont work properly)\n  const increment = useRef(null)\n  \n  // functions for the Control Buttons Bar\n  const startPlaying = () => {\n    if (isPlay) return\n    setIsPlay(true)\n    setIsPause(false)\n    increment.current = setInterval(() => {\n      setRedBeatIndex((redBeatIndex) => redBeatIndex === 15 ? 0 : redBeatIndex + 1)\n    }, delay)\n  }\n\n  const pausePlaying = () => {\n    if (!isPlay) return\n    clearInterval(increment.current);\n    setIsPlay(false)\n    setIsPause(true)\n  }\n\n  const stopPlaying = () => {\n    clearInterval(increment.current)\n    setIsPlay(false)\n    setIsPause(false)\n    setRedBeatIndex(-1)\n  }\n\n  const resetPlaying = () => {\n    clearInterval(increment.current)\n    setIsPlay(false)\n    setIsPause(false)\n    setRedBeatIndex(-1)\n    setDelay(1000)\n    setTempo(60)\n    document.getElementById('tempo-slider').value = 60\n    document.getElementById('volume-slider').value = 0.75\n    setVolume(0.75)\n    setSounds(getSoundPoints())\n    setActiveSounds([])\n  }\n\n  const clearInstrument = () => {\n    let currentInsrtumentName = instruments.filter(instrument => instrument.checked)[0].name\n    setSounds(sounds.map(soundRow => soundRow.map(\n      (sound => (sound.activeInstruments[currentInsrtumentName]) ? { ...sound, activeInstruments: { ...sound.activeInstruments, [currentInsrtumentName]: false } } : sound\n      )\n    )))\n  }\n\n\n  const handleTempo = ev => {\n    let value = ev.target.value\n    setTempo(value)\n    setDelay(60 / value * 1000)\n  }\n\n\n  const handleVolume = ev =>  {if (isPlay) setVolume(ev.target.value)}\n\n  const playUpdateTempo = () => {\n    if (!isPlay) return\n    clearInterval(increment.current);\n    increment.current = setInterval(() => {\n      setRedBeatIndex((redBeatIndex) => redBeatIndex === 15 ? 0 : redBeatIndex + 1)\n    }, delay)\n  }\n\n   // functions for saving & loading modals in the Control Buttons Bar\n\n  const toggleSaveModal = () => {\n    if (!isShowSave) getPresets()\n    setIsShowSave(!isShowSave)\n    setIsShowLoad(false)\n  }\n\n  const toggleLoadModal = () => {\n    if (!isShowLoad) getPresets()\n    setIsShowLoad(!isShowLoad)\n    setIsShowSave(false)\n  }\n\n  const deletePreset = (id) => {\n    console.log('entered delete!')\n    fetch(`/api/${id}`,{\n      method:'delete',\n      body: {\n        id: id\n      }\n    })\n    .then(res=> getPresets())\n    .catch(err => console.error(err))\n\n\n  }\n  \n  const getPresets = () => {\n    console.log('@getPresets')\n    fetch('/api')\n    .then(res=> {\n      if(res.ok){\n        return res.json()\n      }\n    }).then(jsonResponse => {\n      setInitialState(jsonResponse)\n    })\n    .catch(err => console.error(err))\n  }\n\n  const loadSounds = (snds,tmpo) => {\n\n    let parsedSounds = JSON.parse(snds)\n    setSounds(parsedSounds)\n    setTempo(tmpo)\n    setDelay(60 / tmpo * 1000)\n    toggleLoadModal()\n  }\n\n\n\n  return (\n    <Provider value={\n      {\n        beatCpts: beatCpts,\n        delay: delay,\n        initialState: initialState,\n        instruments: instruments,\n        isShowLoad: isShowLoad,\n        isShowSave: isShowSave,\n        tempo: tempo,\n        sounds: sounds,\n        redBeatIndex: redBeatIndex,\n        volume: volume,\n        actions: {\n          assignColor: assignColor,\n          checkInstrument: checkInstrument,\n          clearInstrument : clearInstrument,\n          deletePreset : deletePreset,\n          handleClickedSound: handleClickedSound,\n          handleTempo: handleTempo,\n          handleVolume: handleVolume,\n          loadSounds : loadSounds,\n          startPlaying: startPlaying,\n          stopPlaying: stopPlaying,\n          toggleLoadModal: toggleLoadModal,\n          toggleSaveModal: toggleSaveModal,\n          pausePlaying: pausePlaying,\n          playUpdateTempo: playUpdateTempo,\n          resetPlaying: resetPlaying,\n          assignSoundClass: assignSoundClass\n        }\n      }\n    }>\n\n      <div className=\"App\">\n          <Main />\n      </div>\n    </Provider>\n  )\n}\n\nexport default App;\n","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\serviceWorker.js",[],"C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\Main\\Main.js",[],"C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\ControlButtons\\ControlButtons.js",[],"C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\Header\\Header.js",[],"C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\InstrumentsBar\\InstrumentsBar.js",[],"C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\BeatBar\\BeatBar.js",[],"C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\Load\\Load.js",["64","65"],"import React from 'react'\nimport './load.css'\nimport { Consumer } from './../Context'\nfunction Load(props){\n\n    return (\n            <div  className=\"load window\">\n            <div className=\"close\" onClick={() => props.toggleLoad()}>X</div>\n            <h1 className=\"load-header\">Load Preset</h1>\n                        <div className=\"load-headers\">\n                            <span>Composer</span><span>Title</span>\n                        </div>\n        <Consumer>\n            {\n                p => \n\n                    <ul className=\"preset-list\">\n                    {\n                    (p.initialState) && \n                    p.initialState.map((state,index) => {\n                        return (\n                            <li key={index+'state'} onClick={()=> p.actions.loadSounds(state.sounds,state.tempo)}>\n                            <p>{state.composerName}</p>\n                            <p>{state.title}</p>\n\n                            <div className=\"delete\" onClick={(e) => \n                                {\n                                    e.stopPropagation()\n                                    p.actions.deletePreset(state._id)\n                                    \n                                }\n                                }>✗</div>\n                            </li>\n                            )\n                         })     \n                        || <p>no saved compositions :( </p>     \n                    }\n                    </ul>\n            }\n        </Consumer>\n            </div>\n    )\n}\n\nexport default Load","C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\Save\\Save.js",[],"C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\SoundBoard\\SoundBoard.js",[],"C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\Context\\index.js",[],"C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\Beat\\Beat.js",[],"C:\\Users\\איתי\\Downloads\\go local\\react\\beatmaker\\client\\src\\components\\Sound\\Sound.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":153,"column":6,"nodeType":"72","endLine":153,"endColumn":63,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":19,"column":38,"nodeType":"76","messageId":"77","endLine":19,"endColumn":40},{"ruleId":"74","severity":1,"message":"75","line":36,"column":25,"nodeType":"76","messageId":"77","endLine":36,"endColumn":27},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'activeSounds', 'playSounds', and 'sounds'. Either include them or remove the dependency array.","ArrayExpression",["80"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [redBeatIndex, isPlay, isShowLoad, isShowSave, initialState, sounds, activeSounds, playSounds]",{"range":"83","text":"84"},[4403,4460],"[redBeatIndex, isPlay, isShowLoad, isShowSave, initialState, sounds, activeSounds, playSounds]"]