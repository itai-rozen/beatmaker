{"version":3,"sources":["sounds/all-instruments.mp3","components/Context/index.js","components/Beat/Beat.js","components/BeatBar/BeatBar.js","components/ControlButtons/ControlButtons.js","components/Header/Header.js","components/InstrumentsBar/InstrumentsBar.js","components/Load/Load.js","components/Save/Save.js","components/Sound/Sound.js","components/SoundBoard/SoundBoard.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Context","React","createContext","Provider","Consumer","Beat","props","p","className","actions","assignColor","idx","BeatBar","beatCpts","map","beat","i","key","ControlButtons","onClick","toggleLoadModal","toggleSaveModal","startPlaying","stopPlaying","pausePlaying","resetPlaying","clearInstrument","tempo","defaultValue","type","onMouseUp","playUpdateTempo","onTouchEnd","onChange","event","handleTempo","id","min","max","volume","handleVolume","step","Header","InstrumentsBar","instruments","instrument","index","name","checked","checkInstrument","htmlFor","toUpperCase","Load","initialState","state","loadSounds","sounds","composerName","title","Save","action","method","required","value","JSON","stringify","alert","Sound","assignSoundClass","j","handleClickedSound","SoundBoard","soundRow","sound","scale","Main","filter","isShowSave","isShowLoad","App","SCALES","push","getBeatCpts","getSoundPoints","length","activeInstruments","useState","setSounds","activeSounds","setActiveSounds","redBeatIndex","setRedBeatIndex","setInitialState","setInstruments","setIsShowSave","setIsShowLoad","isPlay","setIsPlay","isPause","setIsPause","delay","setDelay","setTempo","setVolume","useSound","notes","sprite","count","sprites","forEach","getSprites","interrupt","play","useEffect","actives","console","log","increment","useRef","fetch","then","res","ok","json","jsonResponse","catch","err","error","currentInsrtumentName","ev","target","snds","tmpo","parsedSounds","parse","current","setInterval","clearInterval","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8fb1828e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/all-instruments.3f94a69e.mp3\";","import React from 'react'\nconst Context = React.createContext()\n\nexport const Provider = Context.Provider\nexport const Consumer = Context.Consumer","import React from 'react'\nimport './beat.css'\n\nimport { Consumer } from '../Context'\n\nfunction Beat(props){\nreturn (\n<Consumer>\n    {\n        p =>\n<li   className={'beat ' + p.actions.assignColor(props.idx)} ></li>\n    }\n</Consumer>\n)\n}\n\nexport default Beat\n\n\n","import React from 'react'\nimport './beatbar.css'\nimport { Consumer } from '../Context'\nimport Beat from './../Beat/Beat.js'\nfunction BeatBar() {\n    return (\n        <Consumer>\n            {\n                p =>\n                    <div className=\"beat-bar\">\n                        <ul   className=\"beat-list\">{p.beatCpts.map((beat,i) => <Beat  key={'beat'+i} idx={i}  />)}</ul>\n                        \n                    </div>\n            }\n        </Consumer>\n    )\n}\n\nexport default BeatBar","import React from 'react'\nimport { Consumer } from '../Context'\nimport './controlbuttons.css'\n\nfunction ControlButtons() {\n            /* <button className=\"load-btn\" onClick={() => props.actions.toggleLoadModal()}>📁</button>\n            <button className=\"save-btn\" onClick={() => props.actions.toggleSaveModal()}>&#128190;</button> */\n    return (\n        <Consumer>\n            {\n            props => \n\n        <div className=\"control-panel\">\n            <button className=\"load-btn\" onClick={() => props.actions.toggleLoadModal()}>📁</button>\n            <button className=\"save-btn\" onClick={() => props.actions.toggleSaveModal()}>&#128190;</button>\n            <button onClick={() => props.actions.startPlaying()} >&#9654;</button>\n            <button onClick={() => props.actions.stopPlaying()} >&#9632;</button>\n            <button onClick={() => props.actions.pausePlaying()} >&#10074;&#10074;</button>\n            <button onClick={() => props.actions.resetPlaying()} >Reset</button>\n            <button onClick={() => props.actions.clearInstrument()} >Clear</button>\n        <div className=\"sliders\">\n                <div className=\"slider\">\n                    <div className=\"bpm rotate-back\">BPM</div>\n                    <div className=\"current-tempo rotate-back\">{props.tempo}</div> \n                    <input   defaultValue={props.tempo } type=\"range\" onMouseUp={() => props.actions.playUpdateTempo()} onTouchEnd={() => props.actions.playUpdateTempo()} onChange={(event)=> props.actions.handleTempo(event)} id=\"tempo-slider\" min=\"30\" max=\"180\" />\n                </div>\n                <div className=\"slider\">\n                    <div className=\"mute hidden\"></div>\n                    <div className=\"rotate-back\" id=\"volume-icon\" >&#128266;</div>\n                    {/* onClick={()=> props.actions.toggleMute()}  */}\n                    <input defaultValue={props.volume } type=\"range\" onChange={(event)=> props.actions.handleVolume(event)} step=\"0.01\" id=\"volume-slider\" min=\"0\" max=\"1\" />\n                </div>\n        </div>\n        </div>\n            }\n        </Consumer>\n    )\n}\n\nexport default ControlButtons","import React from 'react'\nimport './header.css'\n\nfunction Header() {\n    return (\n        <h1 className=\"header\">Beat Maker</h1>\n    )\n}\n\nexport default Header","import React from 'react'\nimport './instrumentsbar.css'\nimport { Consumer } from './../Context'\n\nfunction InstrumentsBar() {\n\n   \n\n    return (\n        <Consumer>\n            {\n            p =>\n                <div className=\"nav\">\n                    {p.instruments.map((instrument,index) => {\n                        return (\n                        <div key={index+'i'} className=\"instrument\">\n                            <input className={instrument.name} id={'rad'+index} type=\"radio\" \n                            checked={instrument.checked} onChange={() => p.actions.checkInstrument(instrument.name)} \n                            name={'rad'+index} />\n                            <label htmlFor={'rad'+index}>{instrument.name.toUpperCase()}</label>\n                        </div>\n                                )\n                        })}\n                    </div>\n            }\n        </Consumer>\n    )\n}\n\nexport default InstrumentsBar","import React from 'react'\nimport './load.css'\nimport { Consumer } from './../Context'\nfunction Load(){\n\n    return (\n            <div  className=\"load window\">\n            <h1 className=\"load-header\">Load Preset</h1>\n                        <div className=\"load-headers\">\n                            <span>Composer</span><span>Title</span>\n                        </div>\n        <Consumer>\n            {\n                p => \n                \n                    <ul className=\"preset-list\">\n                    {\n                    (p.initialState) && \n                    p.initialState.map((state,index) => {\n                        return (\n                            <li key={index+'state'} onClick={()=> p.actions.loadSounds(state.sounds,state.tempo)}>\n                            <p>{state.composerName}</p>\n                            <p>{state.title}</p>\n                            </li>\n                            )\n                         })     \n                        || <p>no saved compositions :( </p>     \n                    }\n                    </ul>\n            }\n        </Consumer>\n            </div>\n    )\n}\n\nexport default Load","import React from 'react'\nimport './save.css'\nimport { Consumer } from './../Context'\nfunction Save(){\n\nreturn (\n    <div className=\"save window\">\n        <h1> Save Preset</h1>\n\n        <form className=\"save-form\" action=\"/api\" method=\"POST\">\n        <div className=\"input-container\">\n        <label htmlFor=\"composerName\" className=\"input-label\"> Name: &nbsp;</label>\n            <input className=\"save-input name\" type=\"text\" id=\"composerName\" name=\"composerName\" required/>\n        </div>\n            <br />\n            <div className=\"input-container\">            \n            <label className=\"input-label\" htmlFor=\"title\">Title: &nbsp;</label>\n            <input className=\"save-input title\" type=\"text\" id=\"title\" name=\"title\" required/>\n            </div>\n        <Consumer>\n{\n                p =>\n            <span><input id=\"sounds\" name=\"sounds\" value={JSON.stringify(p.sounds)} type=\"hidden\" />\n            <input type=\"hidden\" id=\"savedTempo\" name=\"tempo\" value={(p.tempo)} />\n            <br />\n            <div className=\"btn-container\">\n            <button className=\"form-save-btn\" onClick={() => {\n                alert('saved!')\n                p.actions.toggleSaveModal()\n                \n                }} >Save</button>\n            </div>\n            </span>\n}\n        </Consumer>\n\n\n        </form>\n    </div>\n)\n}\n\nexport default Save","import React from 'react'\nimport './sound.css'\nimport { Consumer } from '../Context' \n\nfunction Sound(props){\n    return (\n        <Consumer>\n{\n        p =>\n        <li  className={'sound ' + (p.actions.assignSoundClass(props.i,props.j,props.instrument)) + ` ${props.instrument}`}   \n        onClick={() => p.actions.handleClickedSound(props.i,props.j,props.instrument)}></li>\n}\n        </Consumer>\n        )\n}\n\nexport default Sound","import React from 'react'\nimport './soundboard.css'\nimport { Consumer } from '../Context'\nimport Sound from '../Sound/Sound.js'\n\nfunction SoundBoard(props) {\n    return (\n            <div className=\"sound-board\">\n        <Consumer>\n            {\n                p =>\n            p.sounds.map((soundRow,i) => <ul key={'row '+i} className=\"sound-list\"> {soundRow.map((sound, index) =>\n            <Sound  key={'sound ' + index} i={sound.i} j={sound.j} scale={sound.scale} instrument={props.instrument}  />)} </ul>)\n            }\n        </Consumer>\n            </div>\n    )\n}\n\nexport default SoundBoard","import React from 'react'\nimport './main.css'\nimport { Consumer } from '../Context'\n\nimport BeatBar from '../BeatBar/BeatBar.js'\nimport ControlButtons from '../ControlButtons/ControlButtons.js'\nimport Header from '../Header/Header.js'\nimport InstrumentsBar from '../InstrumentsBar/InstrumentsBar.js'\nimport Load from '../Load/Load.js'\nimport Save from '../Save/Save.js'\nimport SoundBoard from '../SoundBoard/SoundBoard'\n\nfunction Main(){\n    return (\n        <div className=\"main\">\n        <Header />\n        <InstrumentsBar />\n        <BeatBar />\n        <Consumer>\n            {\n                p => \n                <div className=\"sound-board\">\n                    {\n                        <SoundBoard instrument={p.instruments.filter(instrument => instrument.checked)[0].name}/>\n                    }\n                    <div className={ (p.isShowSave)? 'save-modal' : 'save-modal hide'} ><Save /></div>\n                    <div className={p.isShowLoad ? 'load-modal': 'load-modal hide'}><Load /></div>\n                </div>\n            }\n        </Consumer>\n        <ControlButtons />\n        </div>\n    )\n}\n\nexport default Main\n\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Provider } from './components/Context'\nimport useSound from 'use-sound'\nimport notes from './../src/sounds/all-instruments.mp3'\nimport './App.css';\nimport Main from './components/Main/Main.js'\n\n\nfunction App() {\n\n  // creating the scale & beat constants\n  const BEATS = 16\n  const SCALES = ['C2', 'D2', 'E2', 'G2', 'C3', 'D3', 'E3', 'G3', 'C4', 'D4', 'E4']\n\n  // creating the BeatBar \n  const getBeatCpts = () => {\n    let beatCpts = []\n    for (let i = 0; i < BEATS; i++) {\n      beatCpts.push(i)\n    }\n    return beatCpts\n  }\n\n  const beatCpts = getBeatCpts()\n\n   // creating the SoundBoard\n\n  const getSoundPoints = () => {\n    let sounds = []\n    for (let i = 0; i < SCALES.length; i++) {\n      sounds.push([])\n      for (let j = 0; j < BEATS; j++) {\n        sounds[i].push({\n          i: i, j: j, scale: SCALES[i],\n          activeInstruments:  {}\n        })\n      }\n    }\n    return sounds\n  }\n\n\n  // assigning names and intervals for the sounds in the mp3 file\n\n  const  getSprites = () => {\n    let count = -1000\n    let sprites = {}\n    instruments.forEach( instrument => {\n      ( SCALES.forEach(scale => {\n        sprites[instrument.name + scale] =  [count += 1000, 1000]  \n      }))\n    })\n    return sprites\n  }\n\n  // initializing some varibales with HOOKS\n\n  const [sounds, setSounds] = useState(getSoundPoints())\n  const [activeSounds, setActiveSounds] = useState([])\n  const [redBeatIndex, setRedBeatIndex] = useState(-1)\n  // const [render, setRender] = useState(0)\n  const [initialState,setInitialState] = useState([])\n  const [instruments, setInstruments] = useState([\n    { name: 'saxophone', checked: true },\n    { name: 'cello', checked: false },\n    { name: 'oboe', checked: false },\n    { name: 'vocal', checked: false },\n    { name: 'guitar', checked: false },\n    { name: 'kora', checked: false },\n    { name: 'vibraphone', checked: false },\n    { name: 'drums', checked: false },\n    { name: 'violin', checked: false}\n  ])\n  const [isShowSave, setIsShowSave] = useState(false)\n  const [isShowLoad, setIsShowLoad] = useState(false)\n  const [isPlay, setIsPlay] = useState(false)\n  const [isPause, setIsPause] = useState(false)\n  const [delay, setDelay] = useState(1000)\n  const [tempo, setTempo] = useState(60)\n  const [volume, setVolume] = useState(0.75)\n\n    // the useSound HOOK !!\n  const [play] = useSound(notes, {\n    volume: volume,\n    sprite: getSprites(),\n    interrupt: false\n  })\n\n  // functions for the Instrument Bar\n\n  const checkInstrument = name => {\n    setInstruments(instruments.map(instrument => (instrument.name === name) ? { ...instrument, checked: true } : { ...instrument, checked: false }))\n  }\n\n\n  // functions for the Beat Bar\n  const assignColor = i => {\n    if (!isPlay && !isPause) return\n    return i === redBeatIndex ? 'red' : ''\n  }\n\n  // functions for the Sound Board\n\n  const handleClickedSound = (i, j, instrument) => {\n    setSounds(\n      sounds.map(soundRow =>\n        soundRow.map(sound => (sound.i === i && sound.j === j) ? { ...sound, activeInstruments: { ...sound.activeInstruments, [instrument]: !sound.activeInstruments[instrument] } } : sound\n        ))\n    )\n  }\n\n  const assignSoundClass = (i, j, instrument) => {\n    let currSoundInstrument = sounds[i][j].activeInstruments[instrument]\n    return (currSoundInstrument === true) ? 'active' : ''\n  }\n\n\n  \n\n\n\n\n  // const toggleMute = () => {\n  //   console.log('let mute!')\n  //   let volumeSliderValue = document.getElementById('volume-slider').value\n  //   if (volumeSliderValue !== 0) {\n  //     volumeSliderValue = 0\n  //     document.querySelector('.mute').classList.remove('hidden')\n  //     setRender(render+1)\n  //   } else {\n  //     volumeSliderValue = 0.75\n  //     document.querySelector('.mute').classList.add('hidden')\n  //     setRender(render+1)\n  //   }\n  // }\n\n\n\n  const playSounds = () => {\n\n    if (isPlay) {\n\n      let currentActives = activeSounds.filter(sound => sound.j === redBeatIndex)\n      // console.log('current actives: ',currentActives)\n      currentActives.forEach(sound => {\n        for (let instrument in sound.activeInstruments) {\n          // console.log('instrument status: ', sound.activeInstruments[instrument])\n          if (sound.activeInstruments[instrument] === true) play({id: instrument + sound.scale})\n        }\n      })\n    }\n  }\n\n  // USE EFFECT! all the stuff that renders on each change of the usestates in the brackets below\n  useEffect(() => {\n    let actives = []\n    sounds.forEach(soundRow => soundRow.forEach(sound => {\n      for (let instrument in (sound.activeInstruments)){\n        if (sound.activeInstruments[instrument]) actives.push(sound)\n      }\n    }))\n    setActiveSounds(actives) \n    // fetch('/api')\n    // .then(res=> {\n    //   if(res.ok){\n    //     return res.json()\n    //   }\n    // }).then(jsonResponse => {\n    //   setInitialState(jsonResponse)\n    // })\n    // .catch(err => console.error(err))\n    console.log('initial state: ',initialState)\n    console.log('active sounds @ useeffect: ', activeSounds)\n    playSounds()\n  }, [redBeatIndex, isPlay,isShowLoad,isShowSave])\n\n\n\n\n  // initializing the increment  with useRef (otherwise setInterval wont work properly)\n  const increment = useRef(null)\n  \n  // functions for the Control Buttons Bar\n  const startPlaying = () => {\n    if (isPlay) return\n    setIsPlay(true)\n    setIsPause(false)\n    increment.current = setInterval(() => {\n      setRedBeatIndex((redBeatIndex) => redBeatIndex === 15 ? 0 : redBeatIndex + 1)\n    }, delay)\n  }\n\n  const pausePlaying = () => {\n    if (!isPlay) return\n    clearInterval(increment.current);\n    setIsPlay(false)\n    setIsPause(true)\n  }\n\n  const stopPlaying = () => {\n    clearInterval(increment.current)\n    setIsPlay(false)\n    setIsPause(false)\n    setRedBeatIndex(-1)\n  }\n\n  const resetPlaying = () => {\n    clearInterval(increment.current)\n    setIsPlay(false)\n    setIsPause(false)\n    setRedBeatIndex(-1)\n    setDelay(1000)\n    setTempo(60)\n    document.getElementById('tempo-slider').value = 60\n    document.getElementById('volume-slider').value = 0.75\n    setVolume(0.75)\n    setSounds(getSoundPoints())\n    setActiveSounds([])\n  }\n\n  const clearInstrument = () => {\n    let currentInsrtumentName = instruments.filter(instrument => instrument.checked)[0].name\n    setSounds(sounds.map(soundRow => soundRow.map(\n      (sound => (sound.activeInstruments[currentInsrtumentName]) ? { ...sound, activeInstruments: { ...sound.activeInstruments, [currentInsrtumentName]: false } } : sound\n      )\n    )))\n  }\n\n\n  const handleTempo = ev => {\n    let value = ev.target.value\n    setTempo(value)\n    setDelay(60 / value * 1000)\n  }\n\n\n  const handleVolume = ev =>  {if (isPlay) setVolume(ev.target.value)}\n\n  const playUpdateTempo = () => {\n    if (!isPlay) return\n    clearInterval(increment.current);\n    increment.current = setInterval(() => {\n      setRedBeatIndex((redBeatIndex) => redBeatIndex === 15 ? 0 : redBeatIndex + 1)\n    }, delay)\n  }\n\n   // functions for saving & loading modals in the Control Buttons Bar\n\n  const toggleSaveModal = () => {\n    fetch('/api')\n    .then(res=> {\n      if(res.ok){\n        return res.json()\n      }\n    }).then(jsonResponse => {\n      setInitialState(jsonResponse)\n    })\n    .catch(err => console.error(err))\n    setIsShowSave(!isShowSave)\n    if (isShowSave) setIsShowLoad(false)\n  }\n\n  const toggleLoadModal = () => {\n    fetch('/api')\n    .then(res=> {\n      if(res.ok){\n        return res.json()\n      }\n    }).then(jsonResponse => {\n      setInitialState(jsonResponse)\n    })\n    .catch(err => console.error(err))\n    setIsShowLoad(!isShowLoad)\n    if (isShowLoad) setIsShowSave(false)\n  }\n  \n\n  const loadSounds = (snds,tmpo) => {\n\n    let parsedSounds = JSON.parse(snds)\n    setSounds(parsedSounds)\n    setTempo(tmpo)\n    setDelay(60 / tmpo * 1000)\n    toggleLoadModal()\n  }\n\n  return (\n    <Provider value={\n      {\n        beatCpts: beatCpts,\n        delay: delay,\n        initialState: initialState,\n        instruments: instruments,\n        isShowLoad: isShowLoad,\n        isShowSave: isShowSave,\n        tempo: tempo,\n        sounds: sounds,\n        redBeatIndex: redBeatIndex,\n        volume: volume,\n        actions: {\n          assignColor: assignColor,\n          checkInstrument: checkInstrument,\n          clearInstrument : clearInstrument,\n          handleClickedSound: handleClickedSound,\n          handleTempo: handleTempo,\n          handleVolume: handleVolume,\n          loadSounds : loadSounds,\n          startPlaying: startPlaying,\n          stopPlaying: stopPlaying,\n          toggleLoadModal: toggleLoadModal,\n          toggleSaveModal: toggleSaveModal,\n          pausePlaying: pausePlaying,\n          playUpdateTempo: playUpdateTempo,\n          resetPlaying: resetPlaying,\n          assignSoundClass: assignSoundClass\n        }\n      }\n    }>\n\n      <div className=\"App\">\n          <Main />\n      </div>\n    </Provider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}